// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: uap/v1/uap.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "uap.v1";

export interface ParseRequest {
  ua: string;
}

export interface ParseResponse {
  ua: string;
  browser: Browser | undefined;
  cpu: CPU | undefined;
  device: Device | undefined;
  engine: Engine | undefined;
  os: OS | undefined;
}

export interface Browser {
  name: string;
  version: string;
  major: string;
}

export interface CPU {
  architecture: string;
}

export interface Device {
  type: string;
  vendor: string;
  model: string;
}

export interface Engine {
  name: string;
  version: string;
}

export interface OS {
  name: string;
  version: string;
}

function createBaseParseRequest(): ParseRequest {
  return { ua: "" };
}

export const ParseRequest = {
  encode(message: ParseRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ua !== "") {
      writer.uint32(10).string(message.ua);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ParseRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ua = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParseRequest {
    return { ua: isSet(object.ua) ? globalThis.String(object.ua) : "" };
  },

  toJSON(message: ParseRequest): unknown {
    const obj: any = {};
    if (message.ua !== "") {
      obj.ua = message.ua;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParseRequest>, I>>(base?: I): ParseRequest {
    return ParseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParseRequest>, I>>(object: I): ParseRequest {
    const message = createBaseParseRequest();
    message.ua = object.ua ?? "";
    return message;
  },
};

function createBaseParseResponse(): ParseResponse {
  return { ua: "", browser: undefined, cpu: undefined, device: undefined, engine: undefined, os: undefined };
}

export const ParseResponse = {
  encode(message: ParseResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ua !== "") {
      writer.uint32(10).string(message.ua);
    }
    if (message.browser !== undefined) {
      Browser.encode(message.browser, writer.uint32(18).fork()).ldelim();
    }
    if (message.cpu !== undefined) {
      CPU.encode(message.cpu, writer.uint32(26).fork()).ldelim();
    }
    if (message.device !== undefined) {
      Device.encode(message.device, writer.uint32(34).fork()).ldelim();
    }
    if (message.engine !== undefined) {
      Engine.encode(message.engine, writer.uint32(42).fork()).ldelim();
    }
    if (message.os !== undefined) {
      OS.encode(message.os, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ParseResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ua = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.browser = Browser.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cpu = CPU.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.device = Device.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.engine = Engine.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.os = OS.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParseResponse {
    return {
      ua: isSet(object.ua) ? globalThis.String(object.ua) : "",
      browser: isSet(object.browser) ? Browser.fromJSON(object.browser) : undefined,
      cpu: isSet(object.cpu) ? CPU.fromJSON(object.cpu) : undefined,
      device: isSet(object.device) ? Device.fromJSON(object.device) : undefined,
      engine: isSet(object.engine) ? Engine.fromJSON(object.engine) : undefined,
      os: isSet(object.os) ? OS.fromJSON(object.os) : undefined,
    };
  },

  toJSON(message: ParseResponse): unknown {
    const obj: any = {};
    if (message.ua !== "") {
      obj.ua = message.ua;
    }
    if (message.browser !== undefined) {
      obj.browser = Browser.toJSON(message.browser);
    }
    if (message.cpu !== undefined) {
      obj.cpu = CPU.toJSON(message.cpu);
    }
    if (message.device !== undefined) {
      obj.device = Device.toJSON(message.device);
    }
    if (message.engine !== undefined) {
      obj.engine = Engine.toJSON(message.engine);
    }
    if (message.os !== undefined) {
      obj.os = OS.toJSON(message.os);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParseResponse>, I>>(base?: I): ParseResponse {
    return ParseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParseResponse>, I>>(object: I): ParseResponse {
    const message = createBaseParseResponse();
    message.ua = object.ua ?? "";
    message.browser = (object.browser !== undefined && object.browser !== null)
      ? Browser.fromPartial(object.browser)
      : undefined;
    message.cpu = (object.cpu !== undefined && object.cpu !== null) ? CPU.fromPartial(object.cpu) : undefined;
    message.device = (object.device !== undefined && object.device !== null)
      ? Device.fromPartial(object.device)
      : undefined;
    message.engine = (object.engine !== undefined && object.engine !== null)
      ? Engine.fromPartial(object.engine)
      : undefined;
    message.os = (object.os !== undefined && object.os !== null) ? OS.fromPartial(object.os) : undefined;
    return message;
  },
};

function createBaseBrowser(): Browser {
  return { name: "", version: "", major: "" };
}

export const Browser = {
  encode(message: Browser, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.major !== "") {
      writer.uint32(26).string(message.major);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Browser {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrowser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.major = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Browser {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      major: isSet(object.major) ? globalThis.String(object.major) : "",
    };
  },

  toJSON(message: Browser): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.major !== "") {
      obj.major = message.major;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Browser>, I>>(base?: I): Browser {
    return Browser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Browser>, I>>(object: I): Browser {
    const message = createBaseBrowser();
    message.name = object.name ?? "";
    message.version = object.version ?? "";
    message.major = object.major ?? "";
    return message;
  },
};

function createBaseCPU(): CPU {
  return { architecture: "" };
}

export const CPU = {
  encode(message: CPU, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.architecture !== "") {
      writer.uint32(10).string(message.architecture);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPU {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPU();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.architecture = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPU {
    return { architecture: isSet(object.architecture) ? globalThis.String(object.architecture) : "" };
  },

  toJSON(message: CPU): unknown {
    const obj: any = {};
    if (message.architecture !== "") {
      obj.architecture = message.architecture;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CPU>, I>>(base?: I): CPU {
    return CPU.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CPU>, I>>(object: I): CPU {
    const message = createBaseCPU();
    message.architecture = object.architecture ?? "";
    return message;
  },
};

function createBaseDevice(): Device {
  return { type: "", vendor: "", model: "" };
}

export const Device = {
  encode(message: Device, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.vendor !== "") {
      writer.uint32(18).string(message.vendor);
    }
    if (message.model !== "") {
      writer.uint32(26).string(message.model);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Device {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vendor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Device {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      vendor: isSet(object.vendor) ? globalThis.String(object.vendor) : "",
      model: isSet(object.model) ? globalThis.String(object.model) : "",
    };
  },

  toJSON(message: Device): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.vendor !== "") {
      obj.vendor = message.vendor;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Device>, I>>(base?: I): Device {
    return Device.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Device>, I>>(object: I): Device {
    const message = createBaseDevice();
    message.type = object.type ?? "";
    message.vendor = object.vendor ?? "";
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseEngine(): Engine {
  return { name: "", version: "" };
}

export const Engine = {
  encode(message: Engine, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Engine {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: Engine): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Engine>, I>>(base?: I): Engine {
    return Engine.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Engine>, I>>(object: I): Engine {
    const message = createBaseEngine();
    message.name = object.name ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseOS(): OS {
  return { name: "", version: "" };
}

export const OS = {
  encode(message: OS, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OS {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OS {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: OS): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OS>, I>>(base?: I): OS {
    return OS.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OS>, I>>(object: I): OS {
    const message = createBaseOS();
    message.name = object.name ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

export type UAParserServiceService = typeof UAParserServiceService;
export const UAParserServiceService = {
  parse: {
    path: "/uap.v1.UAParserService/parse",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ParseRequest) => Buffer.from(ParseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ParseRequest.decode(value),
    responseSerialize: (value: ParseResponse) => Buffer.from(ParseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ParseResponse.decode(value),
  },
} as const;

export interface UAParserServiceServer extends UntypedServiceImplementation {
  parse: handleUnaryCall<ParseRequest, ParseResponse>;
}

export interface UAParserServiceClient extends Client {
  parse(
    request: ParseRequest,
    callback: (error: ServiceError | null, response: ParseResponse) => void,
  ): ClientUnaryCall;
  parse(
    request: ParseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ParseResponse) => void,
  ): ClientUnaryCall;
  parse(
    request: ParseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ParseResponse) => void,
  ): ClientUnaryCall;
}

export const UAParserServiceClient = makeGenericClientConstructor(
  UAParserServiceService,
  "uap.v1.UAParserService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UAParserServiceClient;
  service: typeof UAParserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
